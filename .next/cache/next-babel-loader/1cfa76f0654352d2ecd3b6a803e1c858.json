{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport Link from '../../Link';\nimport { makeStyles, SwipeableDrawer, IconButton, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core/';\nimport Collapse from '@material-ui/core/Collapse';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SendIcon from '@material-ui/icons/Send';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport AllInclusiveIcon from '@material-ui/icons/AllInclusive';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport GroupIcon from '@material-ui/icons/Group';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport EmojiEventsIcon from '@material-ui/icons/EmojiEvents';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { usePagesContext } from '../../contexts/PagesContext';\nimport DarkModeListSwitch from '../DarkModeListSwitch';\nimport { event as GAevent } from '../../functions/gtag';\nimport { useLanguageContext } from '../../contexts/LangContext'; // const iconMapping = {\n//   SendIcon,HomeIcon,AppsIcon,AllInclusiveIcon,InfoIcon,AccountBalanceWalletIcon,GroupIcon,BusinessIcon,EmojiEventsIcon\n// }\n\nconst iconMapping = {\n  SendIcon: __jsx(SendIcon, null),\n  HomeIcon: __jsx(HomeIcon, null),\n  AppsIcon: __jsx(AppsIcon, null),\n  AllInclusiveIcon: __jsx(AllInclusiveIcon, null),\n  InfoIcon: __jsx(InfoIcon, null),\n  AccountBalanceWalletIcon: __jsx(AccountBalanceWalletIcon, null),\n  GroupIcon: __jsx(GroupIcon, null),\n  BusinessIcon: __jsx(BusinessIcon, null),\n  EmojiEventsIcon: __jsx(EmojiEventsIcon, null)\n};\nconst useStyles = makeStyles(theme => ({\n  toolbarMargin: _objectSpread(_objectSpread({}, theme.mixins.toolbar), {}, {\n    marginBottom: '3em'\n  }),\n  menuIconContainer: {\n    marginLeft: 'auto',\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  drawer: {\n    backgroundColor: theme.palette.primary.main,\n    color: '#fafafa'\n  },\n  drawerItem: _objectSpread(_objectSpread({}, theme.typography.tab), {}, {\n    opacity: 0.7\n  }),\n  drawerItemSelected: {\n    '& .MuiListItemText-root': {\n      opacity: 1\n    }\n  },\n  specialDrawerItem: {\n    backgroundColor: theme.palette.secondary.main\n  },\n  drawerIcon: {\n    height: '40px',\n    width: '40px',\n    color: '#fafafa'\n  },\n  drawerTextIcon: {\n    color: '#fafafa'\n  },\n  nested: {\n    paddingLeft: theme.spacing(4)\n  }\n}));\n\nconst DrawerMenu = props => {\n  const {\n    0: menuOpen,\n    1: setMenuOpen\n  } = useState(false);\n  const {\n    0: drawerOpen,\n    1: setDrawerOpen\n  } = useState(false);\n  const classes = useStyles();\n  const {\n    pages,\n    currentPageIndecies,\n    setCurrentPageIndecies\n  } = usePagesContext();\n  const iOS = false && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n  const handleTabChange = (e, value) => {\n    setCurrentPageIndecies([value, null]);\n  };\n\n  const handleSubMenuClick = (event, parentIndex, index) => {\n    setMenuOpen(false);\n    setCurrentPageIndecies([parentIndex, index]);\n  };\n\n  const {\n    siteData,\n    language\n  } = useLanguageContext();\n  return __jsx(React.Fragment, null, __jsx(IconButton, {\n    className: classes.menuIconContainer,\n    onClick: () => setDrawerOpen(!drawerOpen),\n    disableRipple: true\n  }, __jsx(MenuIcon, {\n    className: classes.drawerIcon\n  })), __jsx(SwipeableDrawer, {\n    disableBackdropTransition: !iOS,\n    disableDiscovery: iOS,\n    open: drawerOpen,\n    onClose: () => setDrawerOpen(false),\n    onOpen: () => setDrawerOpen(true),\n    classes: {\n      paper: classes.drawer\n    }\n  }, __jsx(\"div\", {\n    className: classes.toolbarMargin\n  }), __jsx(List, {\n    component: \"nav\",\n    \"aria-labelledby\": \"nested-list-subheader\",\n    className: classes.root,\n    disablePadding: true\n  }, __jsx(DarkModeListSwitch, null), pages.map((page, index) => __jsx(React.Fragment, {\n    key: page.path\n  }, __jsx(ListItem, {\n    divider: true,\n    button: true,\n    component: Link,\n    href: page.path,\n    selected: index === currentPageIndecies[0],\n    onClick: event => {\n      setDrawerOpen(false);\n      handleTabChange(event, index);\n      GAevent({\n        category: 'Menu Buttons',\n        action: `Mobile Drawer ${page.name} Click`,\n        label: 'Website Actions',\n        value: '0'\n      });\n    },\n    className: page.special ? classes.specialDrawerItem : '',\n    classes: {\n      selected: classes.drawerItemSelected\n    }\n  }, __jsx(ListItemIcon, {\n    className: classes.drawerTextIcon\n  }, iconMapping[page.icon]), __jsx(ListItemText, {\n    className: classes.drawerItem,\n    disableTypography: true\n  }, page.nameLang[language]), page.children.length > 0 ? menuOpen ? __jsx(IconButton, {\n    className: classes.menuIconContainer,\n    onClick: e => {\n      e.preventDefault();\n      e.stopPropagation();\n      setMenuOpen(false);\n    },\n    disableRipple: true\n  }, __jsx(ExpandLess, null)) : __jsx(IconButton, {\n    className: classes.menuIconContainer,\n    onClick: e => {\n      e.stopPropagation();\n      e.preventDefault();\n      setMenuOpen(true);\n    },\n    disableRipple: true\n  }, __jsx(ExpandMore, null)) : null), page.children.length > 0 ? __jsx(Collapse, {\n    in: menuOpen,\n    timeout: \"auto\",\n    unmountOnExit: true\n  }, __jsx(List, {\n    component: \"div\",\n    disablePadding: true\n  }, page.children.map((childPage, childIndex) => __jsx(ListItem, {\n    divider: true,\n    button: true,\n    key: childPage.path,\n    component: Link,\n    href: childPage.path,\n    selected: childIndex === currentPageIndecies[1] && index === currentPageIndecies[0],\n    onClick: event => {\n      setDrawerOpen(false);\n      handleTabChange(event, index);\n      handleSubMenuClick(event, index, childIndex);\n      GAevent({\n        category: 'Menu Buttons',\n        action: `Mobile Drawer ${childPage.name} Click`,\n        label: 'Website Actions',\n        value: '0'\n      });\n    },\n    className: classes.nested,\n    classes: {\n      selected: classes.drawerItemSelected\n    }\n  }, __jsx(ListItemIcon, {\n    className: classes.drawerTextIcon\n  }, iconMapping[childPage.icon]), __jsx(ListItemText, {\n    className: classes.drawerItem,\n    disableTypography: true\n  }, childPage.nameLang[language]))))) : null)))));\n};\n\nexport default DrawerMenu;","map":null,"metadata":{},"sourceType":"module"}