{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/Head'; // import Lottie from 'react-lottie-player'\n\nimport clsx from 'clsx';\nimport { Grid, makeStyles, Typography } from '@material-ui/core';\nimport Slider from '@material-ui/core/Slider';\nimport { usePagesContext } from '../src/contexts/PagesContext'; // import estimateAnimation from '../src/animations/estimate.json'\n\nimport ContactForm from '../src/ui/parts/ContactForm';\nimport PageHeader from '../src/ui/PageHeader';\nimport { useLanguageContext } from '../src/contexts/LangContext';\nconst useStyles = makeStyles(theme => ({\n  animationContainer: {\n    overflow: 'hidden',\n    height: '80%'\n  },\n  animation: {\n    marginTop: '-25%',\n    overflow: 'hidden'\n  },\n  imgButton: {\n    cursor: 'pointer'\n  },\n  optionSelected: {\n    backgroundColor: theme.palette.primary.light\n  },\n  playerIcon: {\n    width: '100px',\n    height: '100px',\n    marginLeft: '2em'\n  },\n  optionTitle: {\n    fontWeight: '400',\n    fontSize: '1em'\n  },\n  subHeading: {\n    fontWeight: '400',\n    marginTop: '2em',\n    marginBottom: '2em'\n  }\n})); // const animationOptions = {\n//   loop: true,\n//   autoplay: true,\n//   animationData: estimateAnimation,\n//   rendererSettings: {\n//     preserveAspectRatio: 'xMidYMin meet',\n//     imagePreserveAspectRatio: 'xMidYMin meet',\n//   },\n// }\n\nconst questions = [{\n  id: 1,\n  title: {\n    en: `What are you looking for?`,\n    he: `What are you looking for?`\n  },\n  subtitle: null,\n  active: true,\n  options: [{\n    id: 1,\n    title: {\n      en: `Private & Family`,\n      he: `משפחה או חברים`\n    },\n    subtitle: null,\n    icon: '/assets/icon-teamwork.svg',\n    iconAlt: 'Private & Family',\n    selected: false,\n    cost: 1\n  }, {\n    id: 2,\n    title: {\n      en: `Comapny Events`,\n      he: `חברה או קבוצה`\n    },\n    subtitle: null,\n    icon: '/assets/icon-creative.svg',\n    iconAlt: 'Comapny Events',\n    selected: false,\n    cost: 1.2\n  }, {\n    id: 3,\n    title: {\n      en: `Exhibition & Conference`,\n      he: `אירועים או כנסים`\n    },\n    subtitle: null,\n    icon: '/assets/icon-fun.svg',\n    iconAlt: `Exhibition & Conference`,\n    selected: false,\n    cost: 1.5\n  }]\n}];\nconst hoursMarks = [{\n  value: 1,\n  label: '1hrs'\n}, {\n  value: 2,\n  label: '2hrs'\n}, {\n  value: 3,\n  label: '3hrs'\n}, {\n  value: 4,\n  label: '4hrs'\n}, {\n  value: 5,\n  label: '5hrs'\n}, {\n  value: 6,\n  label: '6hrs'\n}, {\n  value: 7,\n  label: '7hrs'\n}, {\n  value: 8,\n  label: '8hrs'\n}, {\n  value: 9,\n  label: '9hrs'\n}, {\n  value: 10,\n  label: '10+'\n}];\n\nconst Estimate = props => {\n  const classes = useStyles();\n  const {\n    setPageIndecies\n  } = usePagesContext();\n  const {\n    0: selectedId,\n    1: setSelectedId\n  } = useState(0);\n  const {\n    0: playerIconImg,\n    1: setPlayerIconImg\n  } = useState('/assets/player-icons-02.svg');\n  const {\n    0: priceData,\n    1: setPriceData\n  } = useState({\n    eventType: '',\n    eventCost: 0,\n    players: 2,\n    hours: 1\n  });\n\n  const createMsg = language => {\n    return language === 'en' ? `Hello VRFunTeam! I would like more details about a ${priceData.eventType} event, with ${priceData.players} participants, for ${priceData.hours} hours. I got a price estimate of $${calculatePrice()}. Thank you!` : `היי VRFunTeam! ברצוני לשמוע פרטים נוספים על ${priceData.eventType}, עבור ${priceData.players} משתתפים, למשך ${priceData.hours} שעות. קיבלתי הערכת מחיר של ₪${calculatePrice()}. תודה רבה!`;\n  };\n\n  const calculatePrice = language => {\n    const {\n      eventCost,\n      players,\n      hours\n    } = priceData;\n    return language === 'en' ? Math.floor(eventCost * players * 25 * hours) : Math.floor(eventCost * players * 25 * hours * 3.7);\n  };\n\n  const participantLabel = value => {\n    const playerImg = value === 1 ? '/assets/player-icons-01.svg' : value === 2 ? '/assets/player-icons-02.svg' : value <= 5 ? '/assets/player-icons-03.svg' : '/assets/player-icons-04.svg'; // setPlayerIconImg(playerImg)\n\n    const returnValue = value === 20 ? '21+' : value;\n    return returnValue;\n  };\n\n  const hoursLabel = value => {\n    return value === 10 ? '10+' : value;\n  };\n\n  const handleOptionClick = (id, cost, title) => {\n    setPriceData(_objectSpread(_objectSpread({}, priceData), {}, {\n      eventType: title,\n      eventCost: cost\n    }));\n    setSelectedId(id);\n  };\n\n  useEffect(() => {\n    setPageIndecies('/estimate');\n  }, []);\n  const {\n    siteData,\n    language\n  } = useLanguageContext();\n  return __jsx(PageHeader, {\n    header: siteData.pages.estimate\n  }, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, \"Price Estimate for VR events | VRFunTeam\"), __jsx(\"meta\", {\n    name: \"description\",\n    key: \"description\",\n    content: \"Get a free price estimate for your custom VR Event, using our estimate calculator. \"\n  }), __jsx(\"meta\", {\n    key: \"ogtitle\",\n    property: \"og:title\",\n    content: \"Better than reality VR experiences | Free Estimate\"\n  }), __jsx(\"meta\", {\n    key: \"ogurl\",\n    property: \"og:url\",\n    content: \"https://funteamvr.com/estimate\"\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    key: \"canonical\",\n    href: \"https://funteamvr.com/estimate\"\n  })), __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    md: 7\n  }, questions.filter(question => question.active === true).map(question => __jsx(React.Fragment, {\n    key: question.id\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\"\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    className: classes.subHeading,\n    gutterBottom: true\n  }, siteData.estimate.heading1)), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\"\n  }, question.options.map(option => __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    xs: true,\n    className: clsx(classes.imgButton, {\n      [classes.optionSelected]: selectedId === option.id\n    }),\n    onClick: () => handleOptionClick(option.id, option.cost, option.title[language]),\n    key: option.id,\n    style: {\n      maxWidth: '250px',\n      padding: '1em'\n    }\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    align: \"center\",\n    className: classes.optionTitle\n  }, option.title[language])), __jsx(Grid, {\n    item: true\n  }, __jsx(\"img\", {\n    src: option.icon,\n    alt: \"blablaba\",\n    width: \"100%\",\n    height: \"100%\"\n  }))))))), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\"\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    className: classes.subHeading,\n    gutterBottom: true\n  }, siteData.estimate.heading2)), __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    md: 6\n  }, __jsx(Slider, {\n    min: 1,\n    max: 20,\n    defaultValue: 2,\n    valueLabelFormat: participantLabel,\n    getAriaValueText: participantLabel,\n    \"aria-labelledby\": \"discrete-slider-always\",\n    step: 1,\n    marks: null,\n    valueLabelDisplay: \"on\",\n    style: {\n      width: '100%'\n    },\n    onChange: (event, value) => setPriceData(_objectSpread(_objectSpread({}, priceData), {}, {\n      players: parseInt(value)\n    }))\n  })), __jsx(Grid, {\n    item: true,\n    xs: 3,\n    md: 1\n  }, __jsx(\"img\", {\n    src: playerIconImg,\n    alt: \"players\",\n    className: classes.playerIcon\n  }))), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\"\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    className: classes.subHeading,\n    gutterBottom: true\n  }, siteData.estimate.heading3)), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    style: {\n      marginTop: '2em'\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 10,\n    md: 8\n  }, __jsx(Slider, {\n    min: 1,\n    max: 10,\n    defaultValue: 1,\n    valueLabelFormat: hoursLabel,\n    getAriaValueText: hoursLabel,\n    \"aria-labelledby\": \"discrete-slider-always\",\n    step: 1,\n    marks: hoursMarks,\n    valueLabelDisplay: \"on\",\n    style: {\n      width: '100%'\n    },\n    onChange: (event, value) => setPriceData(_objectSpread(_objectSpread({}, priceData), {}, {\n      hours: parseInt(value)\n    }))\n  }))), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    style: {\n      marginTop: '3em',\n      marginBottom: '3em'\n    }\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    gutterBottom: true\n  }, siteData.estimate.price, calculatePrice(language)))), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    style: {\n      marginBottom: '5em'\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 10,\n    md: 8\n  }, __jsx(ContactForm, {\n    message: createMsg(language)\n  }))))));\n};\n\nexport default Estimate;","map":null,"metadata":{},"sourceType":"module"}