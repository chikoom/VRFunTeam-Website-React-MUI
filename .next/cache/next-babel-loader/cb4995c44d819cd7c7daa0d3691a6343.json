{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme';\nconst ThemeUpdateContext = /*#__PURE__*/React.createContext();\nexport function useUpdateTheme() {\n  return useContext(ThemeUpdateContext);\n}\nexport function ThemeContextProvider({\n  children\n}) {\n  const {\n    0: isDarkTheme,\n    1: setIsDarkTheme\n  } = useState(false);\n  const {\n    0: currentTheme,\n    1: setCurrentTheme\n  } = useState({\n    dark: darkTheme,\n    light: lightTheme\n  });\n  const themes = {\n    dark: {\n      en: darkTheme,\n      he: darkTheme_he\n    },\n    light: {\n      en: lightTheme,\n      he: lightTheme_he\n    },\n    he: {\n      dark: darkTheme_he,\n      light: lightTheme_he\n    },\n    en: {\n      dark: darkTheme,\n      light: lightTheme\n    }\n  };\n\n  const toggleTheme = () => {\n    setIsDarkTheme(!isDarkTheme);\n  };\n\n  const changeThemeLanguage = language => {\n    setCurrentTheme(themes[language]);\n  };\n\n  return __jsx(ThemeUpdateContext.Provider, {\n    value: {\n      toggleTheme,\n      isDarkTheme,\n      changeThemeLanguage\n    }\n  }, __jsx(ThemeProvider, {\n    theme: isDarkTheme ? currentTheme.dark : currentTheme.light\n  }, children));\n}","map":null,"metadata":{},"sourceType":"module"}