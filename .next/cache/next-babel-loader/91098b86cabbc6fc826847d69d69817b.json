{"ast":null,"code":"var _s = $RefreshSig$(),\n    _jsxFileName = \"C:\\\\Users\\\\callf\\\\Desktop\\\\DEV\\\\DigiDigi\\\\vr-nextjs\\\\src\\\\contexts\\\\ThemeContext.js\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme';\nvar ThemeUpdateContext = /*#__PURE__*/React.createContext();\nexport function useUpdateTheme() {\n  _s();\n\n  return useContext(ThemeUpdateContext);\n}\n\n_s(useUpdateTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar getQueryLanguage = function getQueryLanguage(qString) {\n  return qString.includes('ln=he') ? 'he' : 'en';\n};\n\nexport function ThemeContextProvider(_ref) {\n  _s2();\n\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      isDarkTheme = _useState[0],\n      setIsDarkTheme = _useState[1];\n\n  var _useState2 = useState(true && getQueryLanguage(window.location.search) === 'he' ? {\n    dark: darkTheme_he,\n    light: lightTheme_he\n  } : {\n    dark: darkTheme,\n    light: lightTheme\n  }),\n      currentTheme = _useState2[0],\n      setCurrentTheme = _useState2[1];\n\n  useEffect(function () {});\n  var themes = {\n    he: {\n      dark: darkTheme_he,\n      light: lightTheme_he\n    },\n    en: {\n      dark: darkTheme,\n      light: lightTheme\n    }\n  };\n\n  var toggleTheme = function toggleTheme() {\n    setIsDarkTheme(!isDarkTheme);\n  };\n\n  var changeThemeLanguage = function changeThemeLanguage(language) {\n    setCurrentTheme(themes[language]);\n  };\n\n  return __jsx(ThemeUpdateContext.Provider, {\n    value: {\n      toggleTheme: toggleTheme,\n      isDarkTheme: isDarkTheme,\n      changeThemeLanguage: changeThemeLanguage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: isDarkTheme ? currentTheme.dark : currentTheme.light,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, children));\n}\n\n_s2(ThemeContextProvider, \"mWiCrmSXo9CV7ZUIIZeOUScE+Bs=\");\n\n_c = ThemeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["C:/Users/callf/Desktop/DEV/DigiDigi/vr-nextjs/src/contexts/ThemeContext.js"],"names":["React","useState","useContext","useEffect","ThemeProvider","lightTheme","darkTheme","lightTheme_he","darkTheme_he","ThemeUpdateContext","createContext","useUpdateTheme","getQueryLanguage","qString","includes","ThemeContextProvider","children","isDarkTheme","setIsDarkTheme","window","location","search","dark","light","currentTheme","setCurrentTheme","themes","he","en","toggleTheme","changeThemeLanguage","language"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,EAA+CC,YAA/C,QAAmE,aAAnE;AAEA,IAAMC,kBAAkB,gBAAGT,KAAK,CAACU,aAAN,EAA3B;AAEA,OAAO,SAASC,cAAT,GAA0B;AAAA;;AAC/B,SAAOT,UAAU,CAACO,kBAAD,CAAjB;AACD;;GAFeE,c;;AAGhB,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO,EAAI;AAClC,SAAOA,OAAO,CAACC,QAAR,CAAiB,OAAjB,IAA4B,IAA5B,GAAmC,IAA1C;AACD,CAFD;;AAGA,OAAO,SAASC,oBAAT,OAA4C;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBACXf,QAAQ,CAAC,KAAD,CADG;AAAA,MAC1CgB,WAD0C;AAAA,MAC7BC,cAD6B;;AAAA,mBAGTjB,QAAQ,CAC9C,QACEW,gBAAgB,CAACO,MAAM,CAACC,QAAP,CAAgBC,MAAjB,CAAhB,KAA6C,IAD/C,GAEI;AACEC,IAAAA,IAAI,EAAEd,YADR;AAEEe,IAAAA,KAAK,EAAEhB;AAFT,GAFJ,GAMI;AACEe,IAAAA,IAAI,EAAEhB,SADR;AAEEiB,IAAAA,KAAK,EAAElB;AAFT,GAP0C,CAHC;AAAA,MAG1CmB,YAH0C;AAAA,MAG5BC,eAH4B;;AAejDtB,EAAAA,SAAS,CAAC,YAAM,CAAE,CAAT,CAAT;AAEA,MAAMuB,MAAM,GAAG;AACbC,IAAAA,EAAE,EAAE;AACFL,MAAAA,IAAI,EAAEd,YADJ;AAEFe,MAAAA,KAAK,EAAEhB;AAFL,KADS;AAKbqB,IAAAA,EAAE,EAAE;AACFN,MAAAA,IAAI,EAAEhB,SADJ;AAEFiB,MAAAA,KAAK,EAAElB;AAFL;AALS,GAAf;;AAUA,MAAMwB,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBX,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAGA,MAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,QAAQ,EAAI;AACtCN,IAAAA,eAAe,CAACC,MAAM,CAACK,QAAD,CAAP,CAAf;AACD,GAFD;;AAIA,SACE,MAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE;AAAEF,MAAAA,WAAW,EAAXA,WAAF;AAAeZ,MAAAA,WAAW,EAAXA,WAAf;AAA4Ba,MAAAA,mBAAmB,EAAnBA;AAA5B,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,aAAD;AACE,IAAA,KAAK,EAAEb,WAAW,GAAGO,YAAY,CAACF,IAAhB,GAAuBE,YAAY,CAACD,KADxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGP,QAHH,CAHF,CADF;AAWD;;IA7CeD,oB;;KAAAA,oB","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme'\r\n\r\nconst ThemeUpdateContext = React.createContext()\r\n\r\nexport function useUpdateTheme() {\r\n  return useContext(ThemeUpdateContext)\r\n}\r\nconst getQueryLanguage = qString => {\r\n  return qString.includes('ln=he') ? 'he' : 'en'\r\n}\r\nexport function ThemeContextProvider({ children }) {\r\n  const [isDarkTheme, setIsDarkTheme] = useState(false)\r\n\r\n  const [currentTheme, setCurrentTheme] = useState(\r\n    typeof window !== 'undefined' &&\r\n      getQueryLanguage(window.location.search) === 'he'\r\n      ? {\r\n          dark: darkTheme_he,\r\n          light: lightTheme_he,\r\n        }\r\n      : {\r\n          dark: darkTheme,\r\n          light: lightTheme,\r\n        }\r\n  )\r\n  useEffect(() => {})\r\n\r\n  const themes = {\r\n    he: {\r\n      dark: darkTheme_he,\r\n      light: lightTheme_he,\r\n    },\r\n    en: {\r\n      dark: darkTheme,\r\n      light: lightTheme,\r\n    },\r\n  }\r\n  const toggleTheme = () => {\r\n    setIsDarkTheme(!isDarkTheme)\r\n  }\r\n  const changeThemeLanguage = language => {\r\n    setCurrentTheme(themes[language])\r\n  }\r\n\r\n  return (\r\n    <ThemeUpdateContext.Provider\r\n      value={{ toggleTheme, isDarkTheme, changeThemeLanguage }}\r\n    >\r\n      <ThemeProvider\r\n        theme={isDarkTheme ? currentTheme.dark : currentTheme.light}\r\n      >\r\n        {children}\r\n      </ThemeProvider>\r\n    </ThemeUpdateContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}