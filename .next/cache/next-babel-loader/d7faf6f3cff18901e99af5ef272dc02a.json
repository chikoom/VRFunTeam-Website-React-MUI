{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport Link from '../../Link';\nimport { DarkModeButton } from '../DarkModeButton';\nimport { Tabs, Tab, Button, makeStyles, MenuItem, MenuList, ClickAwayListener, Grow, Paper, Popper } from '@material-ui/core/';\nimport { usePagesContext } from '../../contexts/PagesContext';\nimport { event as GAevent } from '../../functions/gtag';\nimport LanguageButton from '../LanguageButton';\nconst useStyles = makeStyles(theme => ({\n  toolbarMargin: _objectSpread(_objectSpread({}, theme.mixins.toolbar), {}, {\n    marginBottom: '3em'\n  }),\n  tabContainer: {\n    marginLeft: 'auto'\n  },\n  tab: _objectSpread(_objectSpread({}, theme.typography.tab), {}, {\n    minWidth: 10,\n    marginLeft: '10px'\n  }),\n  button: _objectSpread(_objectSpread({}, theme.typography.estimate), {}, {\n    borderRadius: '50px',\n    marginLeft: '50px',\n    color: 'white'\n  }),\n  menu: {\n    backgroundColor: theme.palette.primary.main,\n    color: 'white',\n    borderRadius: '0px',\n    zIndex: 1302\n  },\n  menuItem: _objectSpread(_objectSpread({}, theme.typography.tab), {}, {\n    opacity: 0.7,\n    '&:hover': {\n      opacity: 1\n    },\n    '&.Mui-selected': {\n      opacity: 1\n    }\n  })\n}));\n\nconst TabsMenu = props => {\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const {\n    0: menuOpen,\n    1: setMenuOpen\n  } = useState(false);\n  const classes = useStyles();\n  const {\n    pages,\n    currentPageIndecies,\n    setCurrentPageIndecies\n  } = usePagesContext();\n\n  const handleTabChange = (e, value) => {// setCurrentPageIndecies([value, null])\n  };\n\n  const handleMenuClick = event => {\n    setAnchorEl(event.currentTarget);\n    setMenuOpen(true);\n  };\n\n  const handleMenuClose = event => {\n    setAnchorEl(null);\n    setMenuOpen(false);\n  };\n\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setMenuOpen(false);\n    }\n  };\n\n  const handleSubMenuClick = (event, parentIndex, index) => {\n    setAnchorEl(null);\n    setMenuOpen(false); // setCurrentPageIndecies([parentIndex, index])\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Tabs, {\n    value: currentPageIndecies[0],\n    onChange: handleTabChange,\n    className: classes.tabContainer\n  }, pages.map(page => {\n    const hasChildren = page.children.length;\n    return __jsx(Tab, {\n      \"aria-owns\": hasChildren && anchorEl ? `menu-${page.name}` : undefined,\n      \"aria-haspopup\": hasChildren && anchorEl ? true : undefined,\n      onMouseOver: hasChildren ? event => handleMenuClick(event) : undefined,\n      label: page.name,\n      className: classes.tab,\n      component: Link,\n      href: page.path,\n      key: page.path,\n      onClick: () => GAevent({\n        category: 'Menu Buttons',\n        action: `Desktop Tabs ${page.name} Click`,\n        label: 'Website Actions',\n        value: '0'\n      })\n    });\n  })), pages.map((page, index) => {\n    const hasChildren = page.children.length;\n    return hasChildren && anchorEl ? __jsx(Popper, {\n      open: menuOpen,\n      anchorEl: anchorEl,\n      role: undefined,\n      transition: true,\n      disablePortal: true,\n      key: page.path,\n      keepMounted: true\n    }, ({\n      TransitionProps,\n      placement\n    }) => __jsx(Grow, _extends({}, TransitionProps, {\n      style: {\n        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'\n      }\n    }), __jsx(Paper, {\n      classes: {\n        root: classes.menu\n      },\n      elevation: 0\n    }, __jsx(ClickAwayListener, {\n      onClickAway: handleMenuClose\n    }, __jsx(MenuList, {\n      disablePadding: true,\n      onMouseLeave: handleMenuClose,\n      autoFocusItem: false,\n      id: `menu-${page.name}`,\n      onKeyDown: handleListKeyDown\n    }, page.children.map((childPage, childIndex) => __jsx(MenuItem, {\n      key: childPage.path,\n      onClick: event => {\n        handleMenuClose();\n        handleTabChange(event, index);\n        handleSubMenuClick(event, index, childIndex);\n        GAevent({\n          category: 'Menu Buttons',\n          action: `Desktop Tabs ${childPage.name} Click`,\n          label: 'Website Actions',\n          value: '0'\n        });\n      },\n      component: Link,\n      href: childPage.path,\n      classes: {\n        root: classes.menuItem\n      },\n      selected: childIndex === currentPageIndecies[1] && index === currentPageIndecies[0]\n    }, childPage.name))))))) : '';\n  }), __jsx(DarkModeButton, null), __jsx(LanguageButton, null), __jsx(Button, {\n    component: Link,\n    href: \"/estimate\",\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.button,\n    onClick: () => GAevent({\n      category: 'Estimate',\n      action: 'Desktop Tabs Special Estimate Click',\n      label: 'Website Actions',\n      value: '0'\n    })\n  }, \"Price Estimate\"));\n};\n\nexport default TabsMenu;","map":null,"metadata":{},"sourceType":"module"}