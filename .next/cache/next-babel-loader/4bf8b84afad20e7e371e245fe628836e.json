{"ast":null,"code":"var _s = $RefreshSig$(),\n    _jsxFileName = \"C:\\\\Users\\\\callf\\\\Desktop\\\\DEV\\\\DigiDigi\\\\vr-nextjs\\\\src\\\\contexts\\\\ThemeContext.js\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme';\nvar ThemeUpdateContext = /*#__PURE__*/React.createContext();\nexport function useUpdateTheme() {\n  _s();\n\n  return useContext(ThemeUpdateContext);\n}\n\n_s(useUpdateTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ThemeContextProvider(_ref) {\n  _s2();\n\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      isDarkTheme = _useState[0],\n      setIsDarkTheme = _useState[1];\n\n  var _useState2 = useState(lightTheme),\n      currentTheme = _useState2[0],\n      setCurrentTheme = _useState2[1];\n\n  var themes = {\n    dark: {\n      en: darkTheme,\n      he: darkTheme_he\n    },\n    light: {\n      en: lightTheme,\n      he: lightTheme_he\n    }\n  };\n\n  var toggleTheme = function toggleTheme(language) {\n    setIsDarkTheme(!isDarkTheme);\n  };\n\n  var changeLanguage = function changeLanguage(language) {\n    setCurrentTheme(isDarkTheme ? themes['dark'][language] : themes['light'][language]);\n  };\n\n  var setTheme = function setTheme(isDark, language) {\n    var dark = isDark ? 'dark' : 'light';\n    setCurrentTheme(themes[language][dark]);\n  };\n\n  return __jsx(ThemeUpdateContext.Provider, {\n    value: {\n      toggleTheme: toggleTheme,\n      isDarkTheme: isDarkTheme,\n      setTheme: setTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: isDarkTheme ? themes['dark'][language] : themes['light'][language],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, children));\n}\n\n_s2(ThemeContextProvider, \"0b7KKgn7yvNSVpjFUhg8OrDhzu4=\");\n\n_c = ThemeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["C:/Users/callf/Desktop/DEV/DigiDigi/vr-nextjs/src/contexts/ThemeContext.js"],"names":["React","useState","useContext","ThemeProvider","lightTheme","darkTheme","lightTheme_he","darkTheme_he","ThemeUpdateContext","createContext","useUpdateTheme","ThemeContextProvider","children","isDarkTheme","setIsDarkTheme","currentTheme","setCurrentTheme","themes","dark","en","he","light","toggleTheme","language","changeLanguage","setTheme","isDark"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,EAA+CC,YAA/C,QAAmE,aAAnE;AAEA,IAAMC,kBAAkB,gBAAGR,KAAK,CAACS,aAAN,EAA3B;AAEA,OAAO,SAASC,cAAT,GAA0B;AAAA;;AAC/B,SAAOR,UAAU,CAACM,kBAAD,CAAjB;AACD;;GAFeE,c;;AAIhB,OAAO,SAASC,oBAAT,OAA4C;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBACXX,QAAQ,CAAC,KAAD,CADG;AAAA,MAC1CY,WAD0C;AAAA,MAC7BC,cAD6B;;AAAA,mBAETb,QAAQ,CAACG,UAAD,CAFC;AAAA,MAE1CW,YAF0C;AAAA,MAE5BC,eAF4B;;AAGjD,MAAMC,MAAM,GAAG;AACbC,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAEd,SADA;AAEJe,MAAAA,EAAE,EAAEb;AAFA,KADO;AAKbc,IAAAA,KAAK,EAAE;AACLF,MAAAA,EAAE,EAAEf,UADC;AAELgB,MAAAA,EAAE,EAAEd;AAFC;AALM,GAAf;;AAUA,MAAMgB,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC9BT,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAGA,MAAMW,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,QAAQ,EAAI;AACjCP,IAAAA,eAAe,CACbH,WAAW,GAAGI,MAAM,CAAC,MAAD,CAAN,CAAeM,QAAf,CAAH,GAA8BN,MAAM,CAAC,OAAD,CAAN,CAAgBM,QAAhB,CAD5B,CAAf;AAGD,GAJD;;AAKA,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASH,QAAT,EAAsB;AACrC,QAAML,IAAI,GAAGQ,MAAM,GAAG,MAAH,GAAY,OAA/B;AACAV,IAAAA,eAAe,CAACC,MAAM,CAACM,QAAD,CAAN,CAAiBL,IAAjB,CAAD,CAAf;AACD,GAHD;;AAKA,SACE,MAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAEI,MAAAA,WAAW,EAAXA,WAAF;AAAeT,MAAAA,WAAW,EAAXA,WAAf;AAA4BY,MAAAA,QAAQ,EAARA;AAA5B,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AACE,IAAA,KAAK,EACHZ,WAAW,GAAGI,MAAM,CAAC,MAAD,CAAN,CAAeM,QAAf,CAAH,GAA8BN,MAAM,CAAC,OAAD,CAAN,CAAgBM,QAAhB,CAF7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGX,QALH,CADF,CADF;AAWD;;IArCeD,oB;;KAAAA,oB","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme'\r\n\r\nconst ThemeUpdateContext = React.createContext()\r\n\r\nexport function useUpdateTheme() {\r\n  return useContext(ThemeUpdateContext)\r\n}\r\n\r\nexport function ThemeContextProvider({ children }) {\r\n  const [isDarkTheme, setIsDarkTheme] = useState(false)\r\n  const [currentTheme, setCurrentTheme] = useState(lightTheme)\r\n  const themes = {\r\n    dark: {\r\n      en: darkTheme,\r\n      he: darkTheme_he,\r\n    },\r\n    light: {\r\n      en: lightTheme,\r\n      he: lightTheme_he,\r\n    },\r\n  }\r\n  const toggleTheme = language => {\r\n    setIsDarkTheme(!isDarkTheme)\r\n  }\r\n  const changeLanguage = language => {\r\n    setCurrentTheme(\r\n      isDarkTheme ? themes['dark'][language] : themes['light'][language]\r\n    )\r\n  }\r\n  const setTheme = (isDark, language) => {\r\n    const dark = isDark ? 'dark' : 'light'\r\n    setCurrentTheme(themes[language][dark])\r\n  }\r\n\r\n  return (\r\n    <ThemeUpdateContext.Provider value={{ toggleTheme, isDarkTheme, setTheme }}>\r\n      <ThemeProvider\r\n        theme={\r\n          isDarkTheme ? themes['dark'][language] : themes['light'][language]\r\n        }\r\n      >\r\n        {children}\r\n      </ThemeProvider>\r\n    </ThemeUpdateContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}