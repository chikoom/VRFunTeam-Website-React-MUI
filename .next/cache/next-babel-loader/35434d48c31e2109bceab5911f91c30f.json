{"ast":null,"code":"var _s = $RefreshSig$(),\n    _jsxFileName = \"C:\\\\Users\\\\callf\\\\Desktop\\\\DEV\\\\DigiDigi\\\\vr-nextjs\\\\src\\\\contexts\\\\ThemeContext.js\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme';\nvar ThemeUpdateContext = /*#__PURE__*/React.createContext();\nexport function useUpdateTheme() {\n  _s();\n\n  return useContext(ThemeUpdateContext);\n}\n\n_s(useUpdateTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ThemeContextProvider(_ref) {\n  _s2();\n\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      isDarkTheme = _useState[0],\n      setIsDarkTheme = _useState[1];\n\n  var _useState2 = useState(lightTheme),\n      currentTheme = _useState2[0],\n      setCurrentTheme = _useState2[1];\n\n  var themes = {\n    he: {\n      dark: darkTheme_he,\n      light: lightTheme_he\n    },\n    en: {\n      dark: darkTheme,\n      light: lightTheme\n    }\n  };\n\n  var toggleTheme = function toggleTheme(language) {\n    setIsDarkTheme(!isDarkTheme);\n  };\n\n  var setTheme = function setTheme(isDark, language) {};\n\n  return __jsx(ThemeUpdateContext.Provider, {\n    value: {\n      toggleTheme: toggleTheme,\n      isDarkTheme: isDarkTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: isDarkTheme ? darkTheme : lightTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, children));\n}\n\n_s2(ThemeContextProvider, \"0b7KKgn7yvNSVpjFUhg8OrDhzu4=\");\n\n_c = ThemeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["C:/Users/callf/Desktop/DEV/DigiDigi/vr-nextjs/src/contexts/ThemeContext.js"],"names":["React","useState","useContext","ThemeProvider","lightTheme","darkTheme","lightTheme_he","darkTheme_he","ThemeUpdateContext","createContext","useUpdateTheme","ThemeContextProvider","children","isDarkTheme","setIsDarkTheme","currentTheme","setCurrentTheme","themes","he","dark","light","en","toggleTheme","language","setTheme","isDark"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,EAA+CC,YAA/C,QAAmE,aAAnE;AAEA,IAAMC,kBAAkB,gBAAGR,KAAK,CAACS,aAAN,EAA3B;AAEA,OAAO,SAASC,cAAT,GAA0B;AAAA;;AAC/B,SAAOR,UAAU,CAACM,kBAAD,CAAjB;AACD;;GAFeE,c;;AAIhB,OAAO,SAASC,oBAAT,OAA4C;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBACXX,QAAQ,CAAC,KAAD,CADG;AAAA,MAC1CY,WAD0C;AAAA,MAC7BC,cAD6B;;AAAA,mBAETb,QAAQ,CAACG,UAAD,CAFC;AAAA,MAE1CW,YAF0C;AAAA,MAE5BC,eAF4B;;AAGjD,MAAMC,MAAM,GAAG;AACbC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAEZ,YADJ;AAEFa,MAAAA,KAAK,EAAEd;AAFL,KADS;AAKbe,IAAAA,EAAE,EAAE;AACFF,MAAAA,IAAI,EAAEd,SADJ;AAEFe,MAAAA,KAAK,EAAEhB;AAFL;AALS,GAAf;;AAUA,MAAMkB,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC9BT,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAGA,MAAMW,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASF,QAAT,EAAsB,CAAE,CAAzC;;AAEA,SACE,MAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAED,MAAAA,WAAW,EAAXA,WAAF;AAAeT,MAAAA,WAAW,EAAXA;AAAf,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEA,WAAW,GAAGR,SAAH,GAAeD,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,QADH,CADF,CADF;AAOD;;IAzBeD,oB;;KAAAA,oB","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme'\r\n\r\nconst ThemeUpdateContext = React.createContext()\r\n\r\nexport function useUpdateTheme() {\r\n  return useContext(ThemeUpdateContext)\r\n}\r\n\r\nexport function ThemeContextProvider({ children }) {\r\n  const [isDarkTheme, setIsDarkTheme] = useState(false)\r\n  const [currentTheme, setCurrentTheme] = useState(lightTheme)\r\n  const themes = {\r\n    he: {\r\n      dark: darkTheme_he,\r\n      light: lightTheme_he,\r\n    },\r\n    en: {\r\n      dark: darkTheme,\r\n      light: lightTheme,\r\n    },\r\n  }\r\n  const toggleTheme = language => {\r\n    setIsDarkTheme(!isDarkTheme)\r\n  }\r\n  const setTheme = (isDark, language) => {}\r\n\r\n  return (\r\n    <ThemeUpdateContext.Provider value={{ toggleTheme, isDarkTheme }}>\r\n      <ThemeProvider theme={isDarkTheme ? darkTheme : lightTheme}>\r\n        {children}\r\n      </ThemeProvider>\r\n    </ThemeUpdateContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}