{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\callf\\\\Desktop\\\\DEV\\\\DigiDigi\\\\vr-nextjs\\\\src\\\\contexts\\\\ThemeContext.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme';\nconst ThemeUpdateContext = /*#__PURE__*/React.createContext();\nexport function useUpdateTheme() {\n  return useContext(ThemeUpdateContext);\n}\nexport function ThemeContextProvider({\n  children\n}) {\n  const {\n    0: isDarkTheme,\n    1: setIsDarkTheme\n  } = useState(false);\n  const {\n    0: currentTheme,\n    1: setCurrentTheme\n  } = useState(lightTheme);\n  const themes = {\n    dark: {\n      en: darkTheme,\n      he: darkTheme_he\n    },\n    light: {\n      en: lightTheme,\n      he: lightTheme_he\n    }\n  };\n\n  const toggleTheme = () => {\n    setIsDarkTheme(!isDarkTheme);\n  };\n\n  const changeThemeLanguage = language => {\n    setCurrentTheme(isDarkTheme ? themes['dark'][language] : themes['light'][language]);\n  };\n\n  return __jsx(ThemeUpdateContext.Provider, {\n    value: {\n      toggleTheme,\n      isDarkTheme,\n      changeThemeLanguage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: currentTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, children));\n}","map":{"version":3,"sources":["C:/Users/callf/Desktop/DEV/DigiDigi/vr-nextjs/src/contexts/ThemeContext.js"],"names":["React","useState","useContext","ThemeProvider","lightTheme","darkTheme","lightTheme_he","darkTheme_he","ThemeUpdateContext","createContext","useUpdateTheme","ThemeContextProvider","children","isDarkTheme","setIsDarkTheme","currentTheme","setCurrentTheme","themes","dark","en","he","light","toggleTheme","changeThemeLanguage","language"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,EAA+CC,YAA/C,QAAmE,aAAnE;AAEA,MAAMC,kBAAkB,gBAAGR,KAAK,CAACS,aAAN,EAA3B;AAEA,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAOR,UAAU,CAACM,kBAAD,CAAjB;AACD;AAED,OAAO,SAASG,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA4C;AACjD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAA,OAACc,YAAD;AAAA,OAAeC;AAAf,MAAkCf,QAAQ,CAACG,UAAD,CAAhD;AACA,QAAMa,MAAM,GAAG;AACbC,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAEd,SADA;AAEJe,MAAAA,EAAE,EAAEb;AAFA,KADO;AAKbc,IAAAA,KAAK,EAAE;AACLF,MAAAA,EAAE,EAAEf,UADC;AAELgB,MAAAA,EAAE,EAAEd;AAFC;AALM,GAAf;;AAUA,QAAMgB,WAAW,GAAG,MAAM;AACxBR,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAGA,QAAMU,mBAAmB,GAAGC,QAAQ,IAAI;AACtCR,IAAAA,eAAe,CACbH,WAAW,GAAGI,MAAM,CAAC,MAAD,CAAN,CAAeO,QAAf,CAAH,GAA8BP,MAAM,CAAC,OAAD,CAAN,CAAgBO,QAAhB,CAD5B,CAAf;AAGD,GAJD;;AAMA,SACE,MAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE;AAAEF,MAAAA,WAAF;AAAeT,MAAAA,WAAf;AAA4BU,MAAAA;AAA5B,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAER,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCH,QAArC,CAHF,CADF;AAOD","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme'\r\n\r\nconst ThemeUpdateContext = React.createContext()\r\n\r\nexport function useUpdateTheme() {\r\n  return useContext(ThemeUpdateContext)\r\n}\r\n\r\nexport function ThemeContextProvider({ children }) {\r\n  const [isDarkTheme, setIsDarkTheme] = useState(false)\r\n  const [currentTheme, setCurrentTheme] = useState(lightTheme)\r\n  const themes = {\r\n    dark: {\r\n      en: darkTheme,\r\n      he: darkTheme_he,\r\n    },\r\n    light: {\r\n      en: lightTheme,\r\n      he: lightTheme_he,\r\n    },\r\n  }\r\n  const toggleTheme = () => {\r\n    setIsDarkTheme(!isDarkTheme)\r\n  }\r\n  const changeThemeLanguage = language => {\r\n    setCurrentTheme(\r\n      isDarkTheme ? themes['dark'][language] : themes['light'][language]\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ThemeUpdateContext.Provider\r\n      value={{ toggleTheme, isDarkTheme, changeThemeLanguage }}\r\n    >\r\n      <ThemeProvider theme={currentTheme}>{children}</ThemeProvider>\r\n    </ThemeUpdateContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}