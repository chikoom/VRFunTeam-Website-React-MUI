{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/Head'; // import Lottie from 'react-lottie-player'\n\nimport clsx from 'clsx';\nimport { Avatar, CardMedia, Divider, Grid, makeStyles, Paper, Typography } from '@material-ui/core';\nimport Slider from '@material-ui/core/Slider';\nimport { usePagesContext } from '../src/contexts/PagesContext';\nimport estimateAnimation from '../src/animations/estimate.json';\nimport ContactForm from '../src/ui/parts/ContactForm';\nimport PageHeader from '../src/ui/PageHeader';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    animationContainer: {\n      overflow: 'hidden',\n      height: '80%'\n    },\n    animation: {\n      marginTop: '-25%',\n      overflow: 'hidden'\n    },\n    imgButton: {\n      cursor: 'pointer'\n    },\n    optionSelected: {\n      backgroundColor: theme.palette.primary.light\n    },\n    playerIcon: {\n      width: '100px',\n      height: '100px',\n      marginLeft: '2em'\n    },\n    optionTitle: {\n      fontWeight: '400',\n      fontSize: '1em'\n    },\n    subHeading: {\n      fontWeight: '400',\n      marginTop: '2em',\n      marginBottom: '2em'\n    }\n  };\n});\nvar animationOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: estimateAnimation,\n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMin meet',\n    imagePreserveAspectRatio: 'xMidYMin meet'\n  }\n};\nvar questions = [{\n  id: 1,\n  title: 'What are you looking for?',\n  subtitle: null,\n  active: true,\n  options: [{\n    id: 1,\n    title: 'Private & Family',\n    subtitle: null,\n    icon: '/assets/icon-teamwork.svg',\n    iconAlt: 'Private & Family',\n    selected: false,\n    cost: 1\n  }, {\n    id: 2,\n    title: 'Comapny Events',\n    subtitle: null,\n    icon: '/assets/icon-creative.svg',\n    iconAlt: 'Comapny Events',\n    selected: false,\n    cost: 1.2\n  }, {\n    id: 3,\n    title: \"Exhibition & Conference\",\n    subtitle: null,\n    icon: '/assets/icon-fun.svg',\n    iconAlt: \"Exhibition & Conference\",\n    selected: false,\n    cost: 1.5\n  }]\n}];\nvar hoursMarks = [{\n  value: 1,\n  label: '1hrs'\n}, {\n  value: 2,\n  label: '2hrs'\n}, {\n  value: 3,\n  label: '3hrs'\n}, {\n  value: 4,\n  label: '4hrs'\n}, {\n  value: 5,\n  label: '5hrs'\n}, {\n  value: 6,\n  label: '6hrs'\n}, {\n  value: 7,\n  label: '7hrs'\n}, {\n  value: 8,\n  label: '8hrs'\n}, {\n  value: 9,\n  label: '9hrs'\n}, {\n  value: 10,\n  label: '10+'\n}];\n\nvar Estimate = function Estimate(props) {\n  var classes = useStyles();\n\n  var _usePagesContext = usePagesContext(),\n      setPageIndecies = _usePagesContext.setPageIndecies;\n\n  var _useState = useState(0),\n      selectedId = _useState[0],\n      setSelectedId = _useState[1];\n\n  var _useState2 = useState('/assets/player-icons-02.svg'),\n      playerIconImg = _useState2[0],\n      setPlayerIconImg = _useState2[1];\n\n  var _useState3 = useState({\n    eventType: '',\n    eventCost: 0,\n    players: 2,\n    hours: 1\n  }),\n      priceData = _useState3[0],\n      setPriceData = _useState3[1];\n\n  var createMsg = function createMsg() {\n    return \"Hello VRFunTeam! I would like more details about a \".concat(priceData.eventType, \" event, with \").concat(priceData.players, \" participants, for \").concat(priceData.hours, \" hours. I got a price estimate of $\").concat(calculatePrice(), \". Thank you!\");\n  };\n\n  var calculatePrice = function calculatePrice() {\n    var eventCost = priceData.eventCost,\n        players = priceData.players,\n        hours = priceData.hours;\n    return Math.floor(eventCost * players * 25 * hours);\n  };\n\n  var participantLabel = function participantLabel(value) {\n    var playerImg = value === 1 ? '/assets/player-icons-01.svg' : value === 2 ? '/assets/player-icons-02.svg' : value <= 5 ? '/assets/player-icons-03.svg' : '/assets/player-icons-04.svg'; // setPlayerIconImg(playerImg)\n\n    var returnValue = value === 20 ? '21+' : value;\n    return returnValue;\n  };\n\n  var hoursLabel = function hoursLabel(value) {\n    return value === 10 ? '10+' : value;\n  };\n\n  var handleOptionClick = function handleOptionClick(id, cost, title) {\n    setPriceData(_objectSpread(_objectSpread({}, priceData), {}, {\n      eventType: title,\n      eventCost: cost\n    }));\n    setSelectedId(id);\n  };\n\n  useEffect(function () {\n    setPageIndecies('/estimate');\n  }, []);\n  return __jsx(PageHeader, {\n    header: \"Price Estimate\"\n  }, __jsx(Head, null, __jsx(\"title\", {\n    key: \"title\"\n  }, \"Price Estimate for VR events | VRFunTeam\"), __jsx(\"meta\", {\n    name: \"description\",\n    key: \"description\",\n    content: \"Get a free price estimate for your custom VR Event, using our estimate calculator. \"\n  }), __jsx(\"meta\", {\n    key: \"ogtitle\",\n    property: \"og:title\",\n    content: \"Better than reality VR experiences | Free Estimate\"\n  }), __jsx(\"meta\", {\n    key: \"ogurl\",\n    property: \"og:url\",\n    content: \"https://funteamvr.com/estimate\"\n  }), __jsx(\"link\", {\n    rel: \"canonical\",\n    key: \"canonical\",\n    href: \"https://funteamvr.com/estimate\"\n  })), __jsx(Grid, {\n    container: true,\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    md: 3\n  }, __jsx(Grid, {\n    item: true,\n    className: classes.animationContainer\n  }, __jsx(Grid, {\n    item: true,\n    className: classes.animation\n  }))), __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    md: 7\n  }, questions.filter(function (question) {\n    return question.active === true;\n  }).map(function (question) {\n    return __jsx(React.Fragment, {\n      key: question.id\n    }, __jsx(Grid, {\n      item: true,\n      container: true,\n      justify: \"center\"\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      align: \"center\",\n      className: classes.subHeading,\n      gutterBottom: true\n    }, \"Choose your type of event\")), __jsx(Grid, {\n      item: true,\n      container: true,\n      justify: \"center\"\n    }, question.options.map(function (option) {\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        direction: \"column\",\n        xs: true,\n        className: clsx(classes.imgButton, _defineProperty({}, classes.optionSelected, selectedId === option.id)),\n        onClick: function onClick() {\n          return handleOptionClick(option.id, option.cost, option.title);\n        },\n        key: option.id,\n        style: {\n          maxWidth: '250px',\n          padding: '1em'\n        }\n      }, __jsx(Grid, {\n        item: true\n      }, __jsx(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        className: classes.optionTitle\n      }, option.title)), __jsx(Grid, {\n        item: true\n      }, __jsx(\"img\", {\n        src: option.icon,\n        alt: \"blablaba\",\n        width: \"100%\",\n        height: \"100%\"\n      })));\n    })));\n  }), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\"\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    className: classes.subHeading,\n    gutterBottom: true\n  }, \"How many players?\")), __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    md: 6\n  }, __jsx(Slider, {\n    min: 1,\n    max: 20,\n    defaultValue: 2,\n    valueLabelFormat: participantLabel,\n    getAriaValueText: participantLabel,\n    \"aria-labelledby\": \"discrete-slider-always\",\n    step: 1,\n    marks: null,\n    valueLabelDisplay: \"on\",\n    style: {\n      width: '100%'\n    },\n    onChange: function onChange(event, value) {\n      return setPriceData(_objectSpread(_objectSpread({}, priceData), {}, {\n        players: parseInt(value)\n      }));\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 3,\n    md: 1\n  }, __jsx(\"img\", {\n    src: playerIconImg,\n    alt: \"players\",\n    className: classes.playerIcon\n  }))), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\"\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    className: classes.subHeading,\n    gutterBottom: true\n  }, \"How long would you play?\")), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    style: {\n      marginTop: '2em'\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 10,\n    md: 8\n  }, __jsx(Slider, {\n    min: 1,\n    max: 10,\n    defaultValue: 1,\n    valueLabelFormat: hoursLabel,\n    getAriaValueText: hoursLabel,\n    \"aria-labelledby\": \"discrete-slider-always\",\n    step: 1,\n    marks: hoursMarks,\n    valueLabelDisplay: \"on\",\n    style: {\n      width: '100%'\n    },\n    onChange: function onChange(event, value) {\n      return setPriceData(_objectSpread(_objectSpread({}, priceData), {}, {\n        hours: parseInt(value)\n      }));\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    style: {\n      marginTop: '3em',\n      marginBottom: '3em'\n    }\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    gutterBottom: true\n  }, \"Price Est:\")), __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    align: \"center\",\n    gutterBottom: true\n  }, \"$\".concat(calculatePrice())))), __jsx(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    style: {\n      marginBottom: '5em'\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 10,\n    md: 8\n  }, __jsx(ContactForm, {\n    message: createMsg()\n  }))))));\n};\n\nexport default Estimate;","map":null,"metadata":{},"sourceType":"module"}