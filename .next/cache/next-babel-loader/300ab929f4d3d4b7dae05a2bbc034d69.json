{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { Button, Grid, TextField, useTheme, CircularProgress, Snackbar, Slide } from '@material-ui/core';\nimport { green, red } from '@material-ui/core/colors';\nimport SendIcon from '@material-ui/icons/Send';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport { event as GAevent } from '../../functions/gtag';\nimport { useLanguageContext } from '../../../src/contexts/LangContext';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  wrapper: {\n    margin: theme.spacing(1),\n    position: 'relative'\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[700]\n    }\n  },\n  fabProgress: {\n    color: green[500],\n    verticalAlign: 'middle',\n    marginLeft: '1em'\n  },\n  errorIcon: {\n    color: red[500],\n    verticalAlign: 'middle',\n    marginLeft: '1em'\n  },\n  buttonProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12\n  },\n  alert: {\n    zIndex: '9999'\n  }\n}));\n\nfunction TransitionLeft(props) {\n  return __jsx(Slide, _extends({}, props, {\n    direction: \"left\"\n  }));\n}\n\nconst ContactForm = props => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: nameErr,\n    1: setNameErr\n  } = useState(null);\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: emailErr,\n    1: setEmailErr\n  } = useState(null);\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: phoneErr,\n    1: setPhoneErr\n  } = useState(null);\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: messageErr,\n    1: setMessageErr\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n  const {\n    0: sendError,\n    1: setSendError\n  } = useState(false);\n  const {\n    0: alert,\n    1: setAlert\n  } = useState({\n    open: false,\n    message: '',\n    color: ''\n  });\n  useEffect(() => {\n    if (props.message) setMessage(props.message);\n  }, [props.message]);\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success\n  });\n  const fieldMapping = {\n    name: {\n      set: setName,\n      validate: /^[a-zA-Z א-ת\\-]+$/,\n      err: 'Invalid Name',\n      setErr: setNameErr,\n      isErr: nameErr\n    },\n    email: {\n      set: setEmail,\n      validate: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\n      err: 'Invalid Email',\n      setErr: setEmailErr,\n      isErr: emailErr\n    },\n    phone: {\n      set: setPhone,\n      validate: /^(\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4}))+$/,\n      err: 'Invalid Phone',\n      setErr: setPhoneErr,\n      isErr: phoneErr\n    },\n    message: {\n      set: setMessage,\n      validate: /^[0-9@a-zA-Z א-ת\\-\\!\\$]*$/,\n      err: 'Invalid. No special charecters please.',\n      setErr: setMessageErr,\n      isErr: messageErr\n    }\n  };\n\n  const handleInput = event => {\n    fieldMapping[event.target.id].set(event.target.value);\n\n    if (fieldMapping[event.target.id].isErr) {\n      checkError(event.target.id, event.target.value);\n    }\n  };\n\n  const handleInputBlur = event => {\n    checkError(event.target.id, event.target.value);\n  };\n\n  const checkError = (targetId, value) => {\n    let valid = '';\n    valid = fieldMapping[targetId].validate.test(value);\n    if (!valid) fieldMapping[targetId].setErr(true);else fieldMapping[targetId].setErr(false);\n    return valid;\n  };\n\n  const clearForm = () => {\n    setName('');\n    setNameErr(null);\n    setEmail('');\n    setEmailErr(null);\n    setPhone('');\n    setPhoneErr(null);\n    setMessage('');\n  };\n\n  const checkAllErrors = () => {\n    let valid = true;\n\n    if (nameErr !== false) {\n      setNameErr(true);\n      valid = false;\n    }\n\n    if (emailErr !== false) {\n      setEmailErr(true);\n      valid = false;\n    }\n\n    if (phoneErr !== false) {\n      setPhoneErr(true);\n      valid = false;\n    }\n\n    return valid;\n  };\n\n  const handleSubmit = () => {\n    if (checkAllErrors()) {\n      if (!loading) {\n        setSuccess(false);\n        setLoading(true);\n        setSendError(false);\n      }\n\n      axios.post('https://us-central1-vrfunteam-mailer.cloudfunctions.net/sendLead', {\n        name,\n        email,\n        phone,\n        message\n      }).then(res => {\n        setSuccess(true);\n        setLoading(false);\n        clearForm();\n        setAlert({\n          open: true,\n          backgroundColor: '#4BB543',\n          message: 'You message has been sent!'\n        });\n        GAevent({\n          category: 'Leads',\n          action: 'Lead Sent',\n          label: 'Website Conversions',\n          value: '1'\n        });\n      }).catch(err => {\n        setLoading(false);\n        setSendError(true);\n        setAlert({\n          open: true,\n          backgroundColor: '#FF3232',\n          message: 'There was an error sending your message'\n        });\n        GAevent({\n          category: 'Errors',\n          action: 'Lead Failed',\n          label: 'Website Conversions Errors',\n          value: '0'\n        });\n      });\n    }\n  };\n\n  const {\n    siteData,\n    language\n  } = useLanguageContext();\n  return __jsx(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(TextField, {\n    variant: \"filled\",\n    fullWidth: true,\n    label: siteData.contactForm.name,\n    id: \"name\",\n    value: name,\n    onChange: handleInput,\n    onBlur: handleInputBlur,\n    error: nameErr,\n    helperText: nameErr ? fieldMapping.name.err : '',\n    required: true\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(TextField, {\n    variant: \"filled\",\n    fullWidth: true,\n    label: siteData.contactForm.phone,\n    id: \"phone\",\n    value: phone,\n    onChange: handleInput,\n    onBlur: handleInputBlur,\n    error: phoneErr,\n    helperText: phoneErr ? fieldMapping.phone.err : '',\n    required: true\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(TextField, {\n    variant: \"filled\",\n    fullWidth: true,\n    label: siteData.contactForm.email,\n    id: \"email\",\n    value: email,\n    onChange: handleInput,\n    onBlur: handleInputBlur,\n    error: emailErr,\n    helperText: emailErr ? fieldMapping.email.err : '',\n    required: true\n  })), __jsx(Grid, {\n    item: true\n  }, __jsx(TextField, {\n    variant: \"filled\",\n    fullWidth: true,\n    placeholder: siteData.contactForm.text,\n    multiline: true,\n    rows: 8,\n    id: \"message\",\n    value: message,\n    onChange: handleInput,\n    onBlur: handleInputBlur,\n    style: {\n      marginTop: '2em'\n    },\n    error: messageErr,\n    helperText: messageErr ? fieldMapping.message.err : ''\n  })), __jsx(Grid, {\n    item: true,\n    style: {\n      marginTop: '1em'\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: nameErr || emailErr || phoneErr || messageErr || loading,\n    onClick: handleSubmit,\n    className: buttonClassname\n  }, siteData.contactForm.submit, ' ', success ? __jsx(CheckIcon, null) : __jsx(SendIcon, {\n    style: {\n      marginLeft: '0.5em'\n    }\n  })), loading && __jsx(CircularProgress, {\n    size: 30,\n    className: classes.fabProgress\n  }), sendError && __jsx(ErrorOutlineIcon, {\n    size: 30,\n    className: classes.errorIcon\n  }), __jsx(Snackbar, {\n    className: classes.alert,\n    open: alert.open,\n    message: alert.message,\n    ContentProps: {\n      style: {\n        backgroundColor: alert.backgroundColor\n      }\n    },\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    onClose: () => setAlert(_objectSpread(_objectSpread({}, alert), {}, {\n      open: false\n    })),\n    autoHideDuration: 4000\n  })));\n};\n\nexport default ContactForm;","map":null,"metadata":{},"sourceType":"module"}