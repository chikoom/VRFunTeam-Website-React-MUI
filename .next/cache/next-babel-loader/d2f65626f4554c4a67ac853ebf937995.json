{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\callf\\\\Desktop\\\\DEV\\\\DigiDigi\\\\vr-nextjs\\\\src\\\\contexts\\\\ThemeContext.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme';\nconst ThemeUpdateContext = /*#__PURE__*/React.createContext();\nexport function useUpdateTheme() {\n  return useContext(ThemeUpdateContext);\n}\n\nconst getQueryLanguage = qString => {\n  return qString.includes('ln=he') ? 'he' : 'en';\n};\n\nexport function ThemeContextProvider({\n  children\n}) {\n  const {\n    0: isDarkTheme,\n    1: setIsDarkTheme\n  } = useState(false);\n  const {\n    0: currentTheme,\n    1: setCurrentTheme\n  } = useState(false ? {\n    dark: darkTheme,\n    light: lightTheme\n  } : {\n    dark: darkTheme,\n    light: lightTheme\n  });\n  useEffect(() => {});\n  const themes = {\n    dark: {\n      en: darkTheme,\n      he: darkTheme_he\n    },\n    light: {\n      en: lightTheme,\n      he: lightTheme_he\n    },\n    he: {\n      dark: darkTheme_he,\n      light: lightTheme_he\n    },\n    en: {\n      dark: darkTheme,\n      light: lightTheme\n    }\n  };\n\n  const toggleTheme = () => {\n    setIsDarkTheme(!isDarkTheme);\n  };\n\n  const changeThemeLanguage = language => {\n    setCurrentTheme(themes[language]);\n  };\n\n  return __jsx(ThemeUpdateContext.Provider, {\n    value: {\n      toggleTheme,\n      isDarkTheme,\n      changeThemeLanguage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: isDarkTheme ? currentTheme.dark : currentTheme.light,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, children));\n}","map":{"version":3,"sources":["C:/Users/callf/Desktop/DEV/DigiDigi/vr-nextjs/src/contexts/ThemeContext.js"],"names":["React","useState","useContext","useEffect","ThemeProvider","lightTheme","darkTheme","lightTheme_he","darkTheme_he","ThemeUpdateContext","createContext","useUpdateTheme","getQueryLanguage","qString","includes","ThemeContextProvider","children","isDarkTheme","setIsDarkTheme","currentTheme","setCurrentTheme","dark","light","themes","en","he","toggleTheme","changeThemeLanguage","language"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,EAA+CC,YAA/C,QAAmE,aAAnE;AAEA,MAAMC,kBAAkB,gBAAGT,KAAK,CAACU,aAAN,EAA3B;AAEA,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAOT,UAAU,CAACO,kBAAD,CAAjB;AACD;;AACD,MAAMG,gBAAgB,GAAGC,OAAO,IAAI;AAClC,SAAOA,OAAO,CAACC,QAAR,CAAiB,OAAjB,IAA4B,IAA5B,GAAmC,IAA1C;AACD,CAFD;;AAGA,OAAO,SAASC,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA4C;AACjD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCjB,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM;AAAA,OAACkB,YAAD;AAAA,OAAeC;AAAf,MAAkCnB,QAAQ,CAC9C,QACI;AACEoB,IAAAA,IAAI,EAAEf,SADR;AAEEgB,IAAAA,KAAK,EAAEjB;AAFT,GADJ,GAKI;AACEgB,IAAAA,IAAI,EAAEf,SADR;AAEEgB,IAAAA,KAAK,EAAEjB;AAFT,GAN0C,CAAhD;AAWAF,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,CAAT;AAEA,QAAMoB,MAAM,GAAG;AACbF,IAAAA,IAAI,EAAE;AACJG,MAAAA,EAAE,EAAElB,SADA;AAEJmB,MAAAA,EAAE,EAAEjB;AAFA,KADO;AAKbc,IAAAA,KAAK,EAAE;AACLE,MAAAA,EAAE,EAAEnB,UADC;AAELoB,MAAAA,EAAE,EAAElB;AAFC,KALM;AASbkB,IAAAA,EAAE,EAAE;AACFJ,MAAAA,IAAI,EAAEb,YADJ;AAEFc,MAAAA,KAAK,EAAEf;AAFL,KATS;AAabiB,IAAAA,EAAE,EAAE;AACFH,MAAAA,IAAI,EAAEf,SADJ;AAEFgB,MAAAA,KAAK,EAAEjB;AAFL;AAbS,GAAf;;AAkBA,QAAMqB,WAAW,GAAG,MAAM;AACxBR,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAGA,QAAMU,mBAAmB,GAAGC,QAAQ,IAAI;AACtCR,IAAAA,eAAe,CAACG,MAAM,CAACK,QAAD,CAAP,CAAf;AACD,GAFD;;AAIA,SACE,MAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE;AAAEF,MAAAA,WAAF;AAAeT,MAAAA,WAAf;AAA4BU,MAAAA;AAA5B,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,MAAC,aAAD;AACE,IAAA,KAAK,EAAEV,WAAW,GAAGE,YAAY,CAACE,IAAhB,GAAuBF,YAAY,CAACG,KADxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGN,QAHH,CAHF,CADF;AAWD","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport { lightTheme, darkTheme, lightTheme_he, darkTheme_he } from '../ui/theme'\r\n\r\nconst ThemeUpdateContext = React.createContext()\r\n\r\nexport function useUpdateTheme() {\r\n  return useContext(ThemeUpdateContext)\r\n}\r\nconst getQueryLanguage = qString => {\r\n  return qString.includes('ln=he') ? 'he' : 'en'\r\n}\r\nexport function ThemeContextProvider({ children }) {\r\n  const [isDarkTheme, setIsDarkTheme] = useState(false)\r\n\r\n  const [currentTheme, setCurrentTheme] = useState(\r\n    typeof window !== 'undefined'\r\n      ? {\r\n          dark: darkTheme,\r\n          light: lightTheme,\r\n        }\r\n      : {\r\n          dark: darkTheme,\r\n          light: lightTheme,\r\n        }\r\n  )\r\n  useEffect(() => {})\r\n\r\n  const themes = {\r\n    dark: {\r\n      en: darkTheme,\r\n      he: darkTheme_he,\r\n    },\r\n    light: {\r\n      en: lightTheme,\r\n      he: lightTheme_he,\r\n    },\r\n    he: {\r\n      dark: darkTheme_he,\r\n      light: lightTheme_he,\r\n    },\r\n    en: {\r\n      dark: darkTheme,\r\n      light: lightTheme,\r\n    },\r\n  }\r\n  const toggleTheme = () => {\r\n    setIsDarkTheme(!isDarkTheme)\r\n  }\r\n  const changeThemeLanguage = language => {\r\n    setCurrentTheme(themes[language])\r\n  }\r\n\r\n  return (\r\n    <ThemeUpdateContext.Provider\r\n      value={{ toggleTheme, isDarkTheme, changeThemeLanguage }}\r\n    >\r\n      <ThemeProvider\r\n        theme={isDarkTheme ? currentTheme.dark : currentTheme.light}\r\n      >\r\n        {children}\r\n      </ThemeProvider>\r\n    </ThemeUpdateContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}